[build-system]
requires = ["maturin>=1.6.0,<2.0"]
build-backend = "maturin"

[project]
name = "deepbiop"
description = "Deep Learning Preprocessing Library for Biological Data"
readme = "README.md"
authors = [{ name = "Yangyang Li", email = "sunlifeliz5@gmail.com" }]
license = { file = "LICENSE" }
version = "0.1.13"
requires-python = ">=3.9"

keywords = ["deep-learning", "bioinformatics", "biological-data"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering",
]


[project.urls]
Homepage = "https://github.com/cauliyang/DeepBioP"
Documentation = "https://yangyangli.top/DeepBioP"
Repository = "https://github.com/cauliyang/DeepBioP"
Changelog = "https://github.com/cauliyang/DeepBioP/releases"


[tool.mypy]
files = ["deepbiop", "tests"]
strict = true
enable_error_code = ["redundant-expr", "truthy-bool", "ignore-without-code"]
disable_error_code = ["empty-body"]

[[tool.mypy.overrides]]
module = [
    "IPython.*",
    "adbc_driver_manager.*",
    "adbc_driver_sqlite.*",
    "arrow_odbc",
    "backports",
    "connectorx",
    "deltalake.*",
    "fsspec.*",
    "gevent",
    "great_tables",
    "hvplot.*",
    "jax.*",
    "kuzu",
    "matplotlib.*",
    "moto.server",
    "nest_asyncio",
    "openpyxl",
    "polars.polars",
    "pyarrow.*",
    "pydantic",
    "pyiceberg.*",
    "sqlalchemy.*",
    "torch.*",
    "xlsx2csv",
    "xlsxwriter.*",
    "zoneinfo",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["IPython.*", "matplotlib.*"]
follow_imports = "skip"

[[tool.mypy.overrides]]
module = ["deepbiop.*"]
# We exclude the polars module from warn_return_any, because the PyO3 api does not have Python
# type annotations. See https://github.com/PyO3/pyo3/issues/1112 for a discussion on adding
# this capability. We could add a stub file for polars.polars (the PyO3 api), but that
# amounts to duplicating almost all type annotations on our api, as the Python api itself is a
# thin wrapper around the PyO3 api to start with.
warn_return_any = false

[tool.ruff]
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle
    "W",      # pycodestyle
    "F",      # Pyflakes
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # flake8-docstrings
    "D213",   # Augment NumPy docstring convention: Multi-line docstring summary should start at the second line
    "D417",   # Augment NumPy docstring convention: Missing argument descriptions
    "I",      # isort
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "PT",     # flake8-pytest-style
    "RUF",    # Ruff-specific rules
    "PTH",    # flake8-use-pathlib
    "FA",     # flake8-future-annotations
    "PIE",    # flake8-pie
    "TD",     # flake8-todos
    "TRY",    # tryceratops
    "EM",     # flake8-errmsg
    "FBT001", # flake8-boolean-trap
]

ignore = [
    # Line length regulated by formatter
    "E501",
    # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
    "D401", # Relax NumPy docstring convention: First line should be in imperative mood
    # flake8-pytest-style:
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    # flake8-simplify
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM108", # Use ternary operator
    # ruff
    "RUF005", # unpack-instead-of-concatenating-to-collection-literal
    # pycodestyle
    # TODO: Remove errors below to further improve docstring linting
    # Ordered from most common to least common errors.
    "D105", # Missing docstring in magic method
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    # flake8-todos
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link on the line following this TODO
    # tryceratops
    "TRY003", # Avoid specifying long messages outside the exception class
    # Lints below are turned off because of conflicts with the ruff formatter
    "D206",
    "W191",
    "W505",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100", "D102", "D103", "B018", "FBT001"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
addopts = [
    "--tb=short",
    "--strict-config",
    "--strict-markers",
    "--import-mode=importlib",
    # Default to running fast tests only. To run ALL tests, run: pytest -m ""
    "-m not slow and not write_disk and not release and not docs and not hypothesis and not benchmark and not ci_only",
]
markers = [
    "ci_only: Tests that should only run on CI by default.",
    "debug: Tests that should be run on a Polars debug build.",
    "docs: Documentation code snippets",
    "release: Tests that should be run on a Polars release build.",
    "slow: Tests with a longer than average runtime.",
    "write_disk: Tests that write to disk",
]
filterwarnings = [
    # Fail on warnings
    "error",
    # Allow debugging in an IPython console
    "ignore:.*unrecognized arguments.*PyDevIPCompleter:DeprecationWarning",
    # Ignore warnings issued by dependency internals
    "ignore:.*is_sparse is deprecated.*:FutureWarning",
    "ignore:FigureCanvasAgg is non-interactive:UserWarning",
    "ignore:datetime.datetime.utcfromtimestamp\\(\\) is deprecated.*:DeprecationWarning",
    "ignore:datetime.datetime.utcnow\\(\\) is deprecated.*:DeprecationWarning",
    # Introspection under PyCharm IDE can generate this in Python 3.12
    "ignore:.*co_lnotab is deprecated, use co_lines.*:DeprecationWarning",
    "ignore:unclosed file.*:ResourceWarning",
    # Ignore invalid warnings when running earlier versions of SQLAlchemy (we
    # know they are invalid because our standard tests run the latest version)
    "ignore:Deprecated API features detected.*:DeprecationWarning",
]
xfail_strict = true

[tool.coverage.run]
source = ["deepbiop"]
branch = true

[tool.coverage.report]
fail_under = 85
skip_covered = true
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "except ImportError",
    "if TYPE_CHECKING:",
    "from typing_extensions import ",
]


[tool.uv]
dev-dependencies = [
    "sphinx>=7.4.7",
    "interrogate>=1.7.0",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.31",
    "pymdown-extensions>=10.9",
    "pytest>=8.3.2",
    "pytest-sugar>=1.0.0",
]
