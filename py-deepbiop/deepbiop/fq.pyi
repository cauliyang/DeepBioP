# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import typing

class Predict:
    r"""
    A struct to store the prediction result
    """
    prediction: list[int]
    seq: str
    id: str
    is_truncated: bool
    qual: typing.Optional[str]
    def __new__(cls,prediction:typing.Sequence[int], seq:str, id:str, is_truncated:bool, qual:typing.Optional[str]): ...
    def __repr__(self) -> str:
        ...

    def prediction_region(self) -> list[tuple[int, int]]:
        r"""
        Get the prediction region
        """
        ...

    def smooth_prediction(self, window_size:int) -> list[tuple[int, int]]:
        r"""
        Get the smooth prediction region
        """
        ...

    def smooth_label(self, window_size:int) -> list[int]:
        r"""
        Get the smooth label
        """
        ...

    def smooth_and_select_intervals(self, smooth_window_size:int, min_interval_size:int, append_interval_number:int) -> list[tuple[int, int]]:
        r"""
        Smooth and select intervals
        """
        ...

    def seq_len(self) -> int:
        r"""
        Get the sequence length
        """
        ...

    def qual_array(self) -> list[int]:
        r"""
        Get the quality score array
        """
        ...

    def show_info(self, smooth_interval:typing.Sequence[tuple[int, int]], text_width:typing.Optional[int]) -> str:
        r"""
        Show the information of the prediction
        """
        ...

    def __getstate__(self) -> typing.Any:
        ...

    def __setstate__(self, state:typing.Any) -> None:
        ...


class RecordData:
    id: str
    seq: str
    qual: str
    def __new__(cls,id:str, seq:str, qual:str): ...
    def set_id(self, id:str) -> None:
        ...

    def set_seq(self, seq:str) -> None:
        ...

    def set_qual(self, qual:str) -> None:
        ...


